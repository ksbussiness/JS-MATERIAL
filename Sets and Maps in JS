A JavaScript Set is a collection of unique values.
Each value can only occur once in a Set.
The values can be of any type, primitive values or objects.

let l1= new Set([11,22,33,44,11])

console.log(l1); // Set(4) { 11, 22, 33, 44 }

let s1= new Set(); // creates the set 
s1.add("a"); // added an elements in to the set 
s1.add("b");
s1.add("c");

console.log(s1) // Set(3) { 'a', 'b', 'c' }

//console.log(s1.clear()) // clears the complete set
// If you add equal elements, only the first will be saved:

for( let f of s1){
    console.log(f)
}

console.log(s1.size) // gives size


console.log(s1.delete("a"))

console.log(s1)

console.log(s1.has("b")) // checsks te value is present or not 
console.log(s1.keys()) // gives the keys = valuse in the ierator form
console.log(s1.values()) // gives the keys = valuse in the ierator form


// let a1={1,2,3}
// let a2={4,5,6}
// console.log(a1.union(a2)) // in vAlid in the js:

let a1 = new Set([1, 2, 3,4]);
let a2 = new Set([4, 5, 6]);
console.log(a1.union(a2)) // gives teh combimed array
//Set(6) { 1, 2, 3, 4, 5, 6 }


console.log(a1.symmetricDifference(a2)) // Set(5) { 1, 2, 3, 5, 6 }

// The symmetricDifference() method returns a new set containing elements which are in this set or in the argument set, but not in both

let b1=new Set([1,2,3]);
let b2=new Set([4,5,6]);
console.log(b1.isDisjointFrom(b2)); // returns true if no common elemnts are present


let s11=new Set([1,2,3,4]);
let s22=new Set([4,5,6]);
console.log(s11.intersection(s22)); // returns the common elements 



let w1=new Set([1,2,3]);
let w2= new Set([2,3,4,5]);
console.log(w1.difference(w2)) // only gives left set elements 



